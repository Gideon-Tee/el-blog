pipeline {
    agent any

    parameters {
        string(name: 'VERSION', defaultValue: 'latest', description: 'Version of the image')
    }
    
    environment {
        dockerImage = "el-blog"
        registry = "gideontee"
    }

    stages {
        stage("Git checkout") {
            steps {
                script {
                    def gitCheckout = checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/Gideon-Tee/el-blog.git']]])
                }
            }
        }

        stage("Build stage") {
            steps {

                withCredentials([usernamePassword(
                    credentialsId: 'dockerhubcred',
                    usernameVariable: 'DOCKERHUB_USERNAME',
                    passwordVariable: 'DOCKERHUB_PASSWORD'
                )]) {
                    sh """
                        echo 'Logging into Docker Hub...'
                        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

                        echo 'Building the image...'
                        docker build -t $registry/$dockerImage:$VERSION .

                        echo 'Tagging the image...'
                        docker tag $registry/$dockerImage:$VERSION $registry/$dockerImage:$VERSION
                    """
                }

                
            }
        }

        stage("Deploy stage") {
            
            steps {
                input message: "Do you want to deploy?", ok: "Deploy"

                sh "echo 'Deploying the image...'"
                sh "echo 'Pushing to docker hub...'"
                sh "docker push $registry/$dockerImage:$VERSION"

            }
        }
    }


    post {
        success {
            echo "Deploy was successful"
        }
        failure {
            echo "Deploy failed"
        }
        always {
            echo "Pipeline completed"
        }
    }
}